---
icontrols:
version: "rancher-profile"
id: 1
text: ""
type: "master"
groups:
  - id: V-254553
    text: "Use strong TLS settings.\n\nRKE2 uses FIPS validated BoringCrypto modules.
      RKE2 Server can prohibit the use of SSL and unauthorized versions of TLS protocols
      to properly secure communication. There is a lot of traffic between RKE2 nodes
      to deploy, update, and delete resources so it is important to set strong TLS settings
      on top of this default feature. It is also important to use approved cypher suites.
      This ensures the protection of the transmitted information, confidentiality, and
      integrity so that the attacker cannot read or alter this communication.\n\nThe
      use of unsupported protocol exposes vulnerabilities to the Kubernetes by rogue
      traffic interceptions, man-in-the-middle attacks, and impersonation of users or
      services from the container platform runtime, registry, and key store.\n\nTo enable
      the enforcement of minimum version of TLS and cipher suites to be used by the
      various components of RKE2, the settings \"tls-min-version\" and \"tls-cipher-suites\"\
      \ must be set.\n\nFurther documentation of the FIPS modules can be found here:
      https://docs.rke2.io/security/fips_support.\n\nSatisfies: SRG-APP-000014-CTR-000035,
      SRG-APP-000014-CTR-000040, SRG-APP-000219-CTR-000550, SRG-APP-000441-CTR-001090,
      SRG-APP-000442-CTR-001095, SRG-APP-000514-CTR-001315, SRG-APP-000560-CTR-001340,
      SRG-APP-000605-CTR-001380, SRG-APP-000610-CTR-001385, SRG-APP-000635-CTR-001405,
      SRG-APP-000645-CTR-001410"
    checks:
      - id: V-254553-TLS-apiserver
        text: "Use strong TLS settings.\n\nRKE2 uses FIPS validated BoringCrypto modules.
          RKE2 Server can prohibit the use of SSL and unauthorized versions of TLS protocols
          to properly secure communication. There is a lot of traffic between RKE2 nodes
          to deploy, update, and delete resources so it is important to set strong TLS
          settings on top of this default feature. It is also important to use approved
          cypher suites. This ensures the protection of the transmitted information, confidentiality,
          and integrity so that the attacker cannot read or alter this communication.\n\
          \nThe use of unsupported protocol exposes vulnerabilities to the Kubernetes
          by rogue traffic interceptions, man-in-the-middle attacks, and impersonation
          of users or services from the container platform runtime, registry, and key
          store.\n\nTo enable the enforcement of minimum version of TLS and cipher suites
          to be used by the various components of RKE2, the settings \"tls-min-version\"\
          \ and \"tls-cipher-suites\" must be set.\n\nFurther documentation of the FIPS
          modules can be found here: https://docs.rke2.io/security/fips_support.\n\nSatisfies:
          SRG-APP-000014-CTR-000035, SRG-APP-000014-CTR-000040, SRG-APP-000219-CTR-000550,
          SRG-APP-000441-CTR-001090, SRG-APP-000442-CTR-001095, SRG-APP-000514-CTR-001315,
          SRG-APP-000560-CTR-001340, SRG-APP-000605-CTR-001380, SRG-APP-000610-CTR-001385,
          SRG-APP-000635-CTR-001405, SRG-APP-000645-CTR-001410"
        audit: "/bin/ps -fC $apiserverbin"
        tests:
          test_items:
            - flag: --tls-min-version
              compare:
                op: valid_elements
                value: VersionTLS12
              set: true
        remediation: "Configure the use of strong TLS settings.\n\nEdit the RKE2 Server
          configuration file on all RKE2 Server hosts, located at /etc/rancher/rke2/config.yaml,
          to contain the following:\n\nkube-controller-manager-arg: \n- \"tls-min-version=VersionTLS12\"\
          \ [or higher]\n- \"tls-cipher-suites=TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384\"\
          \nkube-scheduler-arg: \n- \"tls-min-version=VersionTLS12\"\n- \"tls-cipher-suites=TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384\"\
          \nkube-apiserver-arg: \n- \"tls-min-version=VersionTLS12\"\n- \"tls-cipher-suites=TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384\"\
          \n\nOnce configuration file is updated, restart the RKE2 Server. Run the command:\n\
          systemctl restart rke2-server"
        scored: true
      - id: V-254553-TLS-controller
        text: "Use strong TLS settings.\n\nRKE2 uses FIPS validated BoringCrypto modules.
          RKE2 Server can prohibit the use of SSL and unauthorized versions of TLS protocols
          to properly secure communication. There is a lot of traffic between RKE2 nodes
          to deploy, update, and delete resources so it is important to set strong TLS
          settings on top of this default feature. It is also important to use approved
          cypher suites. This ensures the protection of the transmitted information, confidentiality,
          and integrity so that the attacker cannot read or alter this communication.\n\
          \nThe use of unsupported protocol exposes vulnerabilities to the Kubernetes
          by rogue traffic interceptions, man-in-the-middle attacks, and impersonation
          of users or services from the container platform runtime, registry, and key
          store.\n\nTo enable the enforcement of minimum version of TLS and cipher suites
          to be used by the various components of RKE2, the settings \"tls-min-version\"\
          \ and \"tls-cipher-suites\" must be set.\n\nFurther documentation of the FIPS
          modules can be found here: https://docs.rke2.io/security/fips_support.\n\nSatisfies:
          SRG-APP-000014-CTR-000035, SRG-APP-000014-CTR-000040, SRG-APP-000219-CTR-000550,
          SRG-APP-000441-CTR-001090, SRG-APP-000442-CTR-001095, SRG-APP-000514-CTR-001315,
          SRG-APP-000560-CTR-001340, SRG-APP-000605-CTR-001380, SRG-APP-000610-CTR-001385,
          SRG-APP-000635-CTR-001405, SRG-APP-000645-CTR-001410"
        audit: "/bin/ps -fC $controllermanagerbin"
        tests:
          test_items:
            - flag: --tls-min-version
              compare:
                op: valid_elements
                value: VersionTLS12
              set: true
        remediation: "Configure the use of strong TLS settings.\n\nEdit the RKE2 Server
          configuration file on all RKE2 Server hosts, located at /etc/rancher/rke2/config.yaml,
          to contain the following:\n\nkube-controller-manager-arg: \n- \"tls-min-version=VersionTLS12\"\
          \ [or higher]\n- \"tls-cipher-suites=TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384\"\
          \nkube-scheduler-arg: \n- \"tls-min-version=VersionTLS12\"\n- \"tls-cipher-suites=TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384\"\
          \nkube-apiserver-arg: \n- \"tls-min-version=VersionTLS12\"\n- \"tls-cipher-suites=TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384\"\
          \n\nOnce configuration file is updated, restart the RKE2 Server. Run the command:\n\
          systemctl restart rke2-server"
        scored: true
      - id: V-254553-TLS-scheduler
        text: "Use strong TLS settings.\n\nRKE2 uses FIPS validated BoringCrypto modules.
          RKE2 Server can prohibit the use of SSL and unauthorized versions of TLS protocols
          to properly secure communication. There is a lot of traffic between RKE2 nodes
          to deploy, update, and delete resources so it is important to set strong TLS
          settings on top of this default feature. It is also important to use approved
          cypher suites. This ensures the protection of the transmitted information, confidentiality,
          and integrity so that the attacker cannot read or alter this communication.\n\
          \nThe use of unsupported protocol exposes vulnerabilities to the Kubernetes
          by rogue traffic interceptions, man-in-the-middle attacks, and impersonation
          of users or services from the container platform runtime, registry, and key
          store.\n\nTo enable the enforcement of minimum version of TLS and cipher suites
          to be used by the various components of RKE2, the settings \"tls-min-version\"\
          \ and \"tls-cipher-suites\" must be set.\n\nFurther documentation of the FIPS
          modules can be found here: https://docs.rke2.io/security/fips_support.\n\nSatisfies:
          SRG-APP-000014-CTR-000035, SRG-APP-000014-CTR-000040, SRG-APP-000219-CTR-000550,
          SRG-APP-000441-CTR-001090, SRG-APP-000442-CTR-001095, SRG-APP-000514-CTR-001315,
          SRG-APP-000560-CTR-001340, SRG-APP-000605-CTR-001380, SRG-APP-000610-CTR-001385,
          SRG-APP-000635-CTR-001405, SRG-APP-000645-CTR-001410"
        audit: "/bin/ps -fC $schedulerbin"
        tests:
          test_items:
            - flag: --tls-min-version
              compare:
                op: valid_elements
                value: VersionTLS12
              set: true
        remediation: "Configure the use of strong TLS settings.\n\nEdit the RKE2 Server
          configuration file on all RKE2 Server hosts, located at /etc/rancher/rke2/config.yaml,
          to contain the following:\n\nkube-controller-manager-arg: \n- \"tls-min-version=VersionTLS12\"\
          \ [or higher]\n- \"tls-cipher-suites=TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384\"\
          \nkube-scheduler-arg: \n- \"tls-min-version=VersionTLS12\"\n- \"tls-cipher-suites=TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384\"\
          \nkube-apiserver-arg: \n- \"tls-min-version=VersionTLS12\"\n- \"tls-cipher-suites=TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384\"\
          \n\nOnce configuration file is updated, restart the RKE2 Server. Run the command:\n\
          systemctl restart rke2-server"
        scored: true
      - id: V-254553-Cipher-apiserver
        text: "Use strong TLS settings.\n\nRKE2 uses FIPS validated BoringCrypto modules.
          RKE2 Server can prohibit the use of SSL and unauthorized versions of TLS protocols
          to properly secure communication. There is a lot of traffic between RKE2 nodes
          to deploy, update, and delete resources so it is important to set strong TLS
          settings on top of this default feature. It is also important to use approved
          cypher suites. This ensures the protection of the transmitted information, confidentiality,
          and integrity so that the attacker cannot read or alter this communication.\n\
          \nThe use of unsupported protocol exposes vulnerabilities to the Kubernetes
          by rogue traffic interceptions, man-in-the-middle attacks, and impersonation
          of users or services from the container platform runtime, registry, and key
          store.\n\nTo enable the enforcement of minimum version of TLS and cipher suites
          to be used by the various components of RKE2, the settings \"tls-min-version\"\
          \ and \"tls-cipher-suites\" must be set.\n\nFurther documentation of the FIPS
          modules can be found here: https://docs.rke2.io/security/fips_support.\n\nSatisfies:
          SRG-APP-000014-CTR-000035, SRG-APP-000014-CTR-000040, SRG-APP-000219-CTR-000550,
          SRG-APP-000441-CTR-001090, SRG-APP-000442-CTR-001095, SRG-APP-000514-CTR-001315,
          SRG-APP-000560-CTR-001340, SRG-APP-000605-CTR-001380, SRG-APP-000610-CTR-001385,
          SRG-APP-000635-CTR-001405, SRG-APP-000645-CTR-001410"
        audit: "/bin/ps -fC $apiserverbin"
        tests:
          test_items:
            - flag: --tls-cipher-suites
              compare:
                op: valid_elements
                value:
                  TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384,TLS_RSA_WITH_AES_256_GCM_SHA384,TLS_RSA_WITH_AES_128_GCM_SHA256
              set: true
        remediation: "Configure the use of strong TLS settings.\n\nEdit the RKE2 Server
          configuration file on all RKE2 Server hosts, located at /etc/rancher/rke2/config.yaml,
          to contain the following:\n\nkube-controller-manager-arg: \n- \"tls-min-version=VersionTLS12\"\
          \ [or higher]\n- \"tls-cipher-suites=TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384\"\
          \nkube-scheduler-arg: \n- \"tls-min-version=VersionTLS12\"\n- \"tls-cipher-suites=TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384\"\
          \nkube-apiserver-arg: \n- \"tls-min-version=VersionTLS12\"\n- \"tls-cipher-suites=TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384\"\
          \n\nOnce configuration file is updated, restart the RKE2 Server. Run the command:\n\
          systemctl restart rke2-server"
        scored: true
      - id: V-254553-Cipher-controller
        text: "Use strong TLS settings.\n\nRKE2 uses FIPS validated BoringCrypto modules.
          RKE2 Server can prohibit the use of SSL and unauthorized versions of TLS protocols
          to properly secure communication. There is a lot of traffic between RKE2 nodes
          to deploy, update, and delete resources so it is important to set strong TLS
          settings on top of this default feature. It is also important to use approved
          cypher suites. This ensures the protection of the transmitted information, confidentiality,
          and integrity so that the attacker cannot read or alter this communication.\n\
          \nThe use of unsupported protocol exposes vulnerabilities to the Kubernetes
          by rogue traffic interceptions, man-in-the-middle attacks, and impersonation
          of users or services from the container platform runtime, registry, and key
          store.\n\nTo enable the enforcement of minimum version of TLS and cipher suites
          to be used by the various components of RKE2, the settings \"tls-min-version\"\
          \ and \"tls-cipher-suites\" must be set.\n\nFurther documentation of the FIPS
          modules can be found here: https://docs.rke2.io/security/fips_support.\n\nSatisfies:
          SRG-APP-000014-CTR-000035, SRG-APP-000014-CTR-000040, SRG-APP-000219-CTR-000550,
          SRG-APP-000441-CTR-001090, SRG-APP-000442-CTR-001095, SRG-APP-000514-CTR-001315,
          SRG-APP-000560-CTR-001340, SRG-APP-000605-CTR-001380, SRG-APP-000610-CTR-001385,
          SRG-APP-000635-CTR-001405, SRG-APP-000645-CTR-001410"
        audit: "/bin/ps -fC $controllermanagerbin"
        tests:
          test_items:
            - flag: --tls-cipher-suites
              compare:
                op: valid_elements
                value:
                  TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384,TLS_RSA_WITH_AES_256_GCM_SHA384,TLS_RSA_WITH_AES_128_GCM_SHA256
              set: true
        remediation: "Configure the use of strong TLS settings.\n\nEdit the RKE2 Server
          configuration file on all RKE2 Server hosts, located at /etc/rancher/rke2/config.yaml,
          to contain the following:\n\nkube-controller-manager-arg: \n- \"tls-min-version=VersionTLS12\"\
          \ [or higher]\n- \"tls-cipher-suites=TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384\"\
          \nkube-scheduler-arg: \n- \"tls-min-version=VersionTLS12\"\n- \"tls-cipher-suites=TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384\"\
          \nkube-apiserver-arg: \n- \"tls-min-version=VersionTLS12\"\n- \"tls-cipher-suites=TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384\"\
          \n\nOnce configuration file is updated, restart the RKE2 Server. Run the command:\n\
          systemctl restart rke2-server"
        scored: true
      - id: V-254553-Cipher-scheduler
        text: "Use strong TLS settings.\n\nRKE2 uses FIPS validated BoringCrypto modules.
          RKE2 Server can prohibit the use of SSL and unauthorized versions of TLS protocols
          to properly secure communication. There is a lot of traffic between RKE2 nodes
          to deploy, update, and delete resources so it is important to set strong TLS
          settings on top of this default feature. It is also important to use approved
          cypher suites. This ensures the protection of the transmitted information, confidentiality,
          and integrity so that the attacker cannot read or alter this communication.\n\
          \nThe use of unsupported protocol exposes vulnerabilities to the Kubernetes
          by rogue traffic interceptions, man-in-the-middle attacks, and impersonation
          of users or services from the container platform runtime, registry, and key
          store.\n\nTo enable the enforcement of minimum version of TLS and cipher suites
          to be used by the various components of RKE2, the settings \"tls-min-version\"\
          \ and \"tls-cipher-suites\" must be set.\n\nFurther documentation of the FIPS
          modules can be found here: https://docs.rke2.io/security/fips_support.\n\nSatisfies:
          SRG-APP-000014-CTR-000035, SRG-APP-000014-CTR-000040, SRG-APP-000219-CTR-000550,
          SRG-APP-000441-CTR-001090, SRG-APP-000442-CTR-001095, SRG-APP-000514-CTR-001315,
          SRG-APP-000560-CTR-001340, SRG-APP-000605-CTR-001380, SRG-APP-000610-CTR-001385,
          SRG-APP-000635-CTR-001405, SRG-APP-000645-CTR-001410"
        audit: "/bin/ps -fC $schedulerbin"
        tests:
          test_items:
            - flag: --tls-cipher-suites
              compare:
                op: valid_elements
                value:
                  TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384,TLS_RSA_WITH_AES_256_GCM_SHA384,TLS_RSA_WITH_AES_128_GCM_SHA256
              set: true
        remediation: "Configure the use of strong TLS settings.\n\nEdit the RKE2 Server
          configuration file on all RKE2 Server hosts, located at /etc/rancher/rke2/config.yaml,
          to contain the following:\n\nkube-controller-manager-arg: \n- \"tls-min-version=VersionTLS12\"\
          \ [or higher]\n- \"tls-cipher-suites=TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384\"\
          \nkube-scheduler-arg: \n- \"tls-min-version=VersionTLS12\"\n- \"tls-cipher-suites=TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384\"\
          \nkube-apiserver-arg: \n- \"tls-min-version=VersionTLS12\"\n- \"tls-cipher-suites=TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384\"\
          \n\nOnce configuration file is updated, restart the RKE2 Server. Run the command:\n\
          systemctl restart rke2-server"
        scored: true

  - id: "V-254554"
    text: "The Kubernetes Controller Manager is a background process that embeds core
      control loops regulating cluster system state through the API Server. Every process
      executed in a pod has an associated service account. By default, service accounts
      use the same credentials for authentication. Implementing the default settings
      poses a high risk to the Kubernetes Controller Manager. Setting the use-service-account-credential
      value lowers the attack surface by generating unique service accounts settings
      for each controller instance."
    checks:
      - id: V-254554
        text: "The Kubernetes Controller Manager is a background process that embeds core
          control loops regulating cluster system state through the API Server. Every
          process executed in a pod has an associated service account. By default, service
          accounts use the same credentials for authentication. Implementing the default
          settings poses a high risk to the Kubernetes Controller Manager. Setting the
          use-service-account-credential value lowers the attack surface by generating
          unique service accounts settings for each controller instance."
        audit: "/bin/ps -fC $controllermanagerbin"
        tests:
          test_items:
            - flag: --use-service-account-credentials
              compare:
                op: eq
                value: true
              set: true
        remediation: "Edit the RKE2 Configuration File /etc/rancher/rke2/config.yaml on
          the RKE2 Control Plane and set the following \"kube-controller-manager-arg\"\
          \ argument:\n- use-service-account-credentials=true\n\nOnce the configuration
          file is updated, restart the RKE2 Server. Run the command:\nsystemctl restart
          rke2-server"
        scored: true
  - id: "V-254555"
    text: "Once an attacker establishes access to a system, the attacker often attempts
      to create a persistent method of re-establishing access. One way to accomplish
      this is for the attacker to modify an existing account. Auditing of account creation
      is one method for mitigating this risk. A comprehensive account management process
      will ensure an audit trail documents the creation of application user accounts
      and, as required, notifies administrators and/or application when accounts are
      created. Such a process greatly reduces the risk that accounts will be surreptitiously
      created and provides logging that can be used for forensic purposes.\n\nWithin
      Rancher RKE2, audit data can be generated from any of the deployed container platform
      components. This audit data is important when there are issues, such as security
      incidents, that must be investigated. To make the audit data worthwhile for the
      investigation of events, it is necessary to know where within the container platform
      the event occurred.\n\nTo address access requirements, many application developers
      choose to integrate their applications with enterprise-level authentication/access/auditing
      mechanisms that meet or exceed access control policy requirements. Such integration
      allows the application developer to offload those access control functions and
      focus on core application features and functionality.\n\nSatisfies: SRG-APP-000026-CTR-000070,
      SRG-APP-000027-CTR-000075, SRG-APP-000028-CTR-000080, SRG-APP-000092-CTR-000165,
      SRG-APP-000095-CTR-000170, SRG-APP-000096-CTR-000175, SRG-APP-000097-CTR-000180,
      SRG-APP-000098-CTR-000185, SRG-APP-000099-CTR-000190, SRG-APP-000100-CTR-000195,
      SRG-APP-000101-CTR-000205, SRG-APP-000319-CTR-000745, SRG-APP-000320-CTR-000750,
      SRG-APP-000343-CTR-000780, SRG-APP-000358-CTR-000805, SRG-APP-000374-CTR-000865,
      SRG-APP-000375-CTR-000870, SRG-APP-000381-CTR-000905, SRG-APP-000409-CTR-000990,
      SRG-APP-000492-CTR-001220, SRG-APP-000493-CTR-001225, SRG-APP-000494-CTR-001230,
      SRG-APP-000495-CTR-001235, SRG-APP-000496-CTR-001240, SRG-APP-000497-CTR-001245,
      SRG-APP-000498-CTR-001250, SRG-APP-000499-CTR-001255, SRG-APP-000500-CTR-001260,
      SRG-APP-000501-CTR-001265, SRG-APP-000502-CTR-001270, SRG-APP-000503-CTR-001275,
      SRG-APP-000504-CTR-001280, SRG-APP-000505-CTR-001285, SRG-APP-000506-CTR-001290,
      SRG-APP-000507-CTR-001295, SRG-APP-000508-CTR-001300, SRG-APP-000509-CTR-001305,
      SRG-APP-000510-CTR-001310, SRG-APP-000516-CTR-000790, SRG-APP-00516-CTR-001325"
    checks:
      - id: V-254555
        text: "Once an attacker establishes access to a system, the attacker often attempts
          to create a persistent method of re-establishing access. One way to accomplish
          this is for the attacker to modify an existing account. Auditing of account
          creation is one method for mitigating this risk. A comprehensive account management
          process will ensure an audit trail documents the creation of application user
          accounts and, as required, notifies administrators and/or application when accounts
          are created. Such a process greatly reduces the risk that accounts will be surreptitiously
          created and provides logging that can be used for forensic purposes.\n\nWithin
          Rancher RKE2, audit data can be generated from any of the deployed container
          platform components. This audit data is important when there are issues, such
          as security incidents, that must be investigated. To make the audit data worthwhile
          for the investigation of events, it is necessary to know where within the container
          platform the event occurred.\n\nTo address access requirements, many application
          developers choose to integrate their applications with enterprise-level authentication/access/auditing
          mechanisms that meet or exceed access control policy requirements. Such integration
          allows the application developer to offload those access control functions and
          focus on core application features and functionality.\n\nSatisfies: SRG-APP-000026-CTR-000070,
          SRG-APP-000027-CTR-000075, SRG-APP-000028-CTR-000080, SRG-APP-000092-CTR-000165,
          SRG-APP-000095-CTR-000170, SRG-APP-000096-CTR-000175, SRG-APP-000097-CTR-000180,
          SRG-APP-000098-CTR-000185, SRG-APP-000099-CTR-000190, SRG-APP-000100-CTR-000195,
          SRG-APP-000101-CTR-000205, SRG-APP-000319-CTR-000745, SRG-APP-000320-CTR-000750,
          SRG-APP-000343-CTR-000780, SRG-APP-000358-CTR-000805, SRG-APP-000374-CTR-000865,
          SRG-APP-000375-CTR-000870, SRG-APP-000381-CTR-000905, SRG-APP-000409-CTR-000990,
          SRG-APP-000492-CTR-001220, SRG-APP-000493-CTR-001225, SRG-APP-000494-CTR-001230,
          SRG-APP-000495-CTR-001235, SRG-APP-000496-CTR-001240, SRG-APP-000497-CTR-001245,
          SRG-APP-000498-CTR-001250, SRG-APP-000499-CTR-001255, SRG-APP-000500-CTR-001260,
          SRG-APP-000501-CTR-001265, SRG-APP-000502-CTR-001270, SRG-APP-000503-CTR-001275,
          SRG-APP-000504-CTR-001280, SRG-APP-000505-CTR-001285, SRG-APP-000506-CTR-001290,
          SRG-APP-000507-CTR-001295, SRG-APP-000508-CTR-001300, SRG-APP-000509-CTR-001305,
          SRG-APP-000510-CTR-001310, SRG-APP-000516-CTR-000790, SRG-APP-00516-CTR-001325"
        audit: "/bin/ps -fC $apiserverbin"
        tests:
          bin_op: and
          test_items:
            - flag: --audit-policy-file
              compare:
                op: eq
                value: "/etc/rancher/rke2/audit-policy.yaml"
              set: true
            - flag: --audit-log-mode
              compare:
                op: eq
                value: blocking-strict
              set: true
        remediation: "Audit logging and policies:\n\nEdit the /etc/rancher/rke2/config.yaml
          file, and enable the audit policy:\naudit-policy-file: /etc/rancher/rke2/audit-policy.yaml\n\
          \n1. Edit the RKE2 Server configuration file on all RKE2 Server hosts, located
          at /etc/rancher/rke2/config.yaml, so that it contains required configuration.\n\
          \n--audit-policy-file= Path to the file that defines the audit policy configuration.
          (Example: /etc/rancher/rke2/audit-policy.yaml)\n--audit-log-mode=blocking-strict\n\
          \nIf configuration file is updated, restart the RKE2 Server. Run the command:\n\
          systemctl restart rke2-server\n\n2. Edit the RKE2 Server configuration file
          on all RKE2 Server hosts, located at /etc/rancher/rke2/config.yaml, so that
          it contains required configuration.\n\nIf using RKE2 v1.24 or older, set:\n\
          profile: cis-1.6\n\nIf using RKE2 v1.25 or newer, set:\nprofile: cis-1.23\n\n\
          Available with October 2023 releases (v1.25.15+rke2r1, v1.26.10+rke2r1, v1.27.7+rke2r1,
          v1.28.3+rke2r1), use the generic profile \"cis\".\n\nIf configuration file is
          updated, restart the RKE2 Server. Run the command:\nsystemctl restart rke2-server\n\
          \n3. Edit the audit policy file, by default located at /etc/rancher/rke2/audit-policy.yaml
          to look like below:\n\napiVersion: audit.k8s.io/v1\nkind: Policy\nmetadata:\n\
          \  name: rke2-audit-policy\nrules:\n  - level: Metadata\n    resources:\n  \
          \  - group: \"\"\n      resources: [\"secrets\"]\n  - level: RequestResponse\n\
          \    resources:\n    - group: \"\"\n      resources: [\"*\"]\n\nIf configuration
          files are updated on a host, restart the RKE2 Service. Run the command \"systemctl
          restart rke2-server\" for server hosts and \"systemctl restart rke2-agent\"\
          \ for agent hosts."
        scored: true
  - id: "V-254556"
    text: "Limiting the number of attack vectors and implementing authentication and
      encryption on the endpoints available to external sources is paramount when securing
      the overall Kubernetes cluster. The Controller Manager API service exposes port
      10252/TCP by default for health and metrics information use. This port does not
      encrypt or authenticate connections. If this port is exposed externally, an attacker
      can use this port to attack the entire Kubernetes cluster. By setting the bind
      address to only localhost (i.e., 127.0.0.1), only those internal services that
      require health and metrics information can access the Control Manager API."
    checks:
      - id: V-254556
        text: "Limiting the number of attack vectors and implementing authentication and
          encryption on the endpoints available to external sources is paramount when
          securing the overall Kubernetes cluster. The Controller Manager API service
          exposes port 10252/TCP by default for health and metrics information use. This
          port does not encrypt or authenticate connections. If this port is exposed externally,
          an attacker can use this port to attack the entire Kubernetes cluster. By setting
          the bind address to only localhost (i.e., 127.0.0.1), only those internal services
          that require health and metrics information can access the Control Manager API."
        audit: "/bin/ps -fC $controllermanagerbin"
        tests:
          test_items:
            - flag: --bind-address
              compare:
                op: eq
                value: "127.0.0.1"
              set: true
        remediation: "Edit the RKE2 Configuration File /etc/rancher/rke2/config.yaml on
          the RKE2 Control Plane and set the following \"kube-controller-manager-arg\"\
          \ argument:\n- bind-address=127.0.0.1\n\nOnce the configuration file is updated,
          restart the RKE2 Server. Run the command:\nsystemctl restart rke2-server"
        scored: true
  - id: "V-254557"
    text: "RKE2 registry is used to store images and is the keeper of truth for trusted
      images within the platform. To guarantee the images' integrity, access to the
      registry must be limited to those individuals who need to perform tasks to the
      images such as the update, creation, or deletion. Without this control access,
      images can be deleted that are in use by RKE2 causing a denial of service (DoS),
      and images can be modified or introduced without going through the testing and
      validation process allowing for the intentional or unintentional introduction
      of containers with flaws and vulnerabilities.\n\nBy allowing anonymous connections,
      the controls put in place to secure the Kubelet can be bypassed. Setting anonymous
      authentication to \"false\" also disables unauthenticated requests from kubelets.\n\
      \nWhile there are instances where anonymous connections may be needed (e.g., health
      checks) and Role-Based Access Controls (RBAC) are in place to limit the anonymous
      access, this access must be disabled and only enabled when necessary."
    checks:
      - id: V-254557
        text: "RKE2 registry is used to store images and is the keeper of truth for trusted
          images within the platform. To guarantee the images' integrity, access to the
          registry must be limited to those individuals who need to perform tasks to the
          images such as the update, creation, or deletion. Without this control access,
          images can be deleted that are in use by RKE2 causing a denial of service (DoS),
          and images can be modified or introduced without going through the testing and
          validation process allowing for the intentional or unintentional introduction
          of containers with flaws and vulnerabilities.\n\nBy allowing anonymous connections,
          the controls put in place to secure the Kubelet can be bypassed. Setting anonymous
          authentication to \"false\" also disables unauthenticated requests from kubelets.\n\
          \nWhile there are instances where anonymous connections may be needed (e.g.,
          health checks) and Role-Based Access Controls (RBAC) are in place to limit the
          anonymous access, this access must be disabled and only enabled when necessary."
        audit: "/bin/ps -fC $kubeletbin"
        audit_config: "/bin/sh -c 'if test -e $kubeletconf; then /bin/cat $kubeletconf; fi' "
        tests:
          test_items:
            - flag: --anonymous-auth
              path: '{.authentication.anonymous.enabled}'
              compare:
                op: eq
                value: false
              set: true
        remediation: "Edit the Kubernetes Kubelet file etc/rancher/rke2/config.yaml on
          the RKE2 Control Plane and set the following:\n--anonymous-auth=false\n\nOnce
          configuration file is updated, restart the RKE2 Agent. Run the command:\nsystemctl
          restart rke2-server"
        scored: true
  - id: "V-254558"
    text: "By default, the API server will listen on two ports. One port is the secure
      port and the other port is called the \"localhost port\". This port is also called
      the \"insecure port\", port 8080. Any requests to this port bypass authentication
      and authorization checks. If this port is left open, anyone who gains access to
      the host on which the master is running can bypass all authorization and authentication
      mechanisms put in place, and have full control over the entire cluster.\n\nClose
      the insecure port by setting the API server's --insecure-port flag to \"0\", ensuring
      that the --insecure-bind-address is not set."
    checks:
      - id: V-254558
        text: "By default, the API server will listen on two ports. One port is the secure
          port and the other port is called the \"localhost port\". This port is also
          called the \"insecure port\", port 8080. Any requests to this port bypass authentication
          and authorization checks. If this port is left open, anyone who gains access
          to the host on which the master is running can bypass all authorization and
          authentication mechanisms put in place, and have full control over the entire
          cluster.\n\nClose the insecure port by setting the API server's --insecure-port
          flag to \"0\", ensuring that the --insecure-bind-address is not set."
        audit: "/bin/ps -fC $apiserverbin"
        tests:
          test_items:
            - flag: --insecure-port
              set: false
        remediation: "Edit the RKE2 Server configuration file on all RKE2 Server hosts,
          located at /etc/rancher/rke2/config.yaml, to contain the following:\n\nkube-apiserver-arg:\n\
          - insecure-port=0\n\nOnce configuration file is updated, restart the RKE2 Server.
          Run the command:\nsystemctl restart rke2-server"
        scored: true
  - id: "V-254559"
    text: "Kubelet serves a small REST API with read access to port 10255. The read-only
      port for Kubernetes provides no authentication or authorization security control.
      Providing unrestricted access on port 10255 exposes Kubernetes pods and containers
      to malicious attacks or compromise. Port 10255 is deprecated and should be disabled.\
      \ \n\nClose the read-only-port by setting the API server's read-only port flag
      to \"0\"."
    checks:
      - id: V-254559
        text: "Kubelet serves a small REST API with read access to port 10255. The read-only
          port for Kubernetes provides no authentication or authorization security control.
          Providing unrestricted access on port 10255 exposes Kubernetes pods and containers
          to malicious attacks or compromise. Port 10255 is deprecated and should be disabled.\
          \ \n\nClose the read-only-port by setting the API server's read-only port flag
          to \"0\"."
        audit: "/bin/ps -fC $kubeletbin"
        tests:
          test_items:
            - flag: --read-only-port
              compare:
                op: eq
                value: "0"
              set: true
        remediation: "Edit the RKE2 Server configuration file on all RKE2 Server hosts,
          located at /etc/rancher/rke2/config.yaml, to contain the following:\nkubelet-arg:\n\
          --read-only-port=0\n\nIf configuration files are updated on a host, restart
          the RKE2 Service. Run the command \"systemctl restart rke2-server\" for server
          hosts and \"systemctl restart rke2-agent\" for agent hosts."
        scored: true

  - id: "V-254560"
    text: "By default, the API server will listen on two ports and addresses. One address
      is the secure address and the other address is called the \"insecure bind\" address
      and is set by default to localhost. Any requests to this address bypass authentication
      and authorization checks. If this insecure bind address is set to localhost, anyone
      who gains access to the host on which the master is running can bypass all authorization
      and authentication mechanisms put in place and have full control over the entire
      cluster.\n\nClose or set the insecure bind address by setting the API server's
      --insecure-bind-address flag to an IP or leave it unset and ensure that the --insecure-bind-port
      is not set."
    # Need to fix
    checks:
      - id: V-254560
        text: "By default, the API server will listen on two ports and addresses. One
          address is the secure address and the other address is called the \"insecure
          bind\" address and is set by default to localhost. Any requests to this address
          bypass authentication and authorization checks. If this insecure bind address
          is set to localhost, anyone who gains access to the host on which the master
          is running can bypass all authorization and authentication mechanisms put in
          place and have full control over the entire cluster.\n\nClose or set the insecure
          bind address by setting the API server's --insecure-bind-address flag to an
          IP or leave it unset and ensure that the --insecure-bind-port is not set."
        audit: "/bin/ps -fC $apiserverbin"
        tests:
          test_items:
            - flag: --insecure-bind-address
              set: false
        remediation: "If running rke2 Kubernetes version > 1.20, this requirement is NA.\n\
          \nUpgrade to a supported version of RKE2 Kubernetes."
        scored: true
  - id: "V-254561"
    text: "Kubelet is the primary agent on each node. The API server communicates with
      each kubelet to perform tasks such as starting/stopping pods. By default, kubelets
      allow all authenticated requests, even anonymous ones, without requiring any authorization
      checks from the API server. This default behavior bypasses any authorization controls
      put in place to limit what users may perform within the Kubernetes cluster. To
      change this behavior, the default setting of AlwaysAllow for the authorization
      mode must be set to \"Webhook\"."
    checks:
      - id: V-254561
        text: "Kubelet is the primary agent on each node. The API server communicates
          with each kubelet to perform tasks such as starting/stopping pods. By default,
          kubelets allow all authenticated requests, even anonymous ones, without requiring
          any authorization checks from the API server. This default behavior bypasses
          any authorization controls put in place to limit what users may perform within
          the Kubernetes cluster. To change this behavior, the default setting of AlwaysAllow
          for the authorization mode must be set to \"Webhook\"."
        audit: "/bin/ps -fC $kubeletbin"
        audit_config: "/bin/sh -c 'if test -e $kubeletconf; then /bin/cat $kubeletconf; fi' "
        tests:
          test_items:
            - flag: --authorization-mode
              path: '{.authorization.mode}'
              compare:
                op: eq
                value: "Webhook"
              set: true
        remediation: "Edit the RKE2 Configuration File /etc/rancher/rke2/config.yaml on
          every RKE2 node and set the following \"kubelet-arg\" argument:\n\n- authorization-mode=Webhook\n\
          \nOnce the configuration file is updated, restart the RKE2 Server or Agent.
          Run the command:\nsystemctl restart rke2-server or systemctl restart rke2-agent"
        scored: true
  - id: "V-254562"
    text: "The Kubernetes API Server controls Kubernetes via an API interface. A user
      who has access to the API essentially has root access to the entire Kubernetes
      cluster. To control access, users must be authenticated and authorized. By allowing
      anonymous connections, the controls put in place to secure the API can be bypassed.\n\
      \nSetting anonymous authentication to \"false\" also disables unauthenticated
      requests from kubelets.\n\nWhile there are instances where anonymous connections
      may be needed (e.g., health checks) and Role-Based Access Controls (RBAC) are
      in place to limit the anonymous access, this access should be disabled, and only
      enabled when necessary."
    checks:
      - id: V-254562
        text: "The Kubernetes API Server controls Kubernetes via an API interface. A user
          who has access to the API essentially has root access to the entire Kubernetes
          cluster. To control access, users must be authenticated and authorized. By allowing
          anonymous connections, the controls put in place to secure the API can be bypassed.\n\
          \nSetting anonymous authentication to \"false\" also disables unauthenticated
          requests from kubelets.\n\nWhile there are instances where anonymous connections
          may be needed (e.g., health checks) and Role-Based Access Controls (RBAC) are
          in place to limit the anonymous access, this access should be disabled, and
          only enabled when necessary."
        audit: "/bin/ps -fC $apiserverbin"
        tests:
          test_items:
            - flag: --anonymous-auth
              compare:
                op: eq
                value: false
              set: true
        remediation: "Edit the RKE2 Configuration File /etc/rancher/rke2/config.yaml on
          the RKE2 Control Plane and set the following \"kube-apiserver-arg\" argument:\n\
          \n- anonymous-auth=false\n\nOnce the configuration file is updated, restart
          the RKE2 Server. Run the command:\nsystemctl restart rke2-server"
        scored: true
  - id: "V-254563"
    text: "Ensure that the --audit-log-maxage argument is set to 30 or as appropriate.\n\
      \nRetaining logs for at least 30 days ensures that you can go back in time and
      investigate or correlate any events. Set your audit log retention period to 30
      days or as per your business requirements.\nResult: Pass"
    checks:
      - id: V-254563
        text: "Ensure that the --audit-log-maxage argument is set to 30 or as appropriate.\n\
          \nRetaining logs for at least 30 days ensures that you can go back in time and
          investigate or correlate any events. Set your audit log retention period to
          30 days or as per your business requirements.\nResult: Pass"
        audit: "/bin/ps -fC $apiserverbin"
        tests:
          test_items:
            - flag: --audit-log-maxage
              compare:
                op: gte
                value: 30
              set: true
        remediation: "Edit the RKE2 Configuration File /etc/rancher/rke2/config.yaml on
          the RKE2 Control Plane and set the following \"kube-apiserver-arg\" argument:\n\
          \n- audit-log-maxage=30\n\nOnce the configuration file is updated, restart the
          RKE2 Server. Run the command:\nsystemctl restart rke2-server"
        scored: true

  # MANUAL
  - id: "V-254564"
    text: "There are various configuration files, logs, access credentials, and other
      files stored on the host filesystem that contain sensitive information. \n\nThese
      files could potentially put at risk, along with other specific workloads and components:\n\
      - API server.\n- proxy.\n- scheduler.\n- controller.\n- etcd.\n- Kubernetes administrator
      account information.\n- audit log access, modification, and deletion.\n- application
      access, modification, and deletion.\n- container runtime files.\n\nIf an attacker
      can gain access to these files, changes can be made to open vulnerabilities and
      bypass user authorizations inherent within Kubernetes with RBAC implemented. It
      is crucial to ensure user permissions are enforced down through to the operating
      system. Protecting file permissions will ensure that if a nonprivileged user gains
      access to the system they will still not be able to access protected information
      from the cluster API, cluster configuration, and sensitive cluster information.
      This control relies on the underlying operating system also having been properly
      configured to allow only least privileged access to perform required operations.\n\
      \nSatisfies: SRG-APP-000133-CTR-000300, SRG-APP-000133-CTR-000295, SRG-APP-000133-CTR-000305,
      SRG-APP-000133-CTR-000310"
    checks:
      - id: V-254564
        text: "There are various configuration files, logs, access credentials, and other
          files stored on the host filesystem that contain sensitive information. \n\n\
          These files could potentially put at risk, along with other specific workloads
          and components:\n- API server.\n- proxy.\n- scheduler.\n- controller.\n- etcd.\n\
          - Kubernetes administrator account information.\n- audit log access, modification,
          and deletion.\n- application access, modification, and deletion.\n- container
          runtime files.\n\nIf an attacker can gain access to these files, changes can
          be made to open vulnerabilities and bypass user authorizations inherent within
          Kubernetes with RBAC implemented. It is crucial to ensure user permissions are
          enforced down through to the operating system. Protecting file permissions will
          ensure that if a nonprivileged user gains access to the system they will still
          not be able to access protected information from the cluster API, cluster configuration,
          and sensitive cluster information. This control relies on the underlying operating
          system also having been properly configured to allow only least privileged access
          to perform required operations.\n\nSatisfies: SRG-APP-000133-CTR-000300, SRG-APP-000133-CTR-000295,
          SRG-APP-000133-CTR-000305, SRG-APP-000133-CTR-000310"
        type: "skip"
        remediation: "File system permissions:\n1. Fix permissions of the files in /etc/rancher/rke2:\n\
          cd /etc/rancher/rke2\nchmod 0600 ./*\nchown root:root ./*\nls -l\n\n2. Fix permissions
          of the files in /var/lib/rancher/rke2:\ncd /var/lib/rancher/rke2\nchown root:root
          ./*\nls -l\n\n3. Fix permissions of the files and directories in /var/lib/rancher/rke2/agent:\n\
          cd /var/lib/rancher/rke2/agent\nchown root:root ./*\nchmod 0700 pod-manifests\n\
          chmod 0700 etc\nfind . -maxdepth 1 -type f -name \"*.kubeconfig\" -exec chmod
          0640 {} \\;\nfind . -maxdepth 1 -type f -name \"*.crt\" -exec chmod 0600 {}
          \\;\nfind . -maxdepth 1 -type f -name \"*.key\" -exec chmod 0600 {} \\;\nls
          -l\n\n4. Fix permissions of the files in /var/lib/rancher/rke2/bin:\ncd /var/lib/rancher/rke2/agent/bin\n\
          chown root:root ./*\nchmod 0750 ./*\nls -l\n\n5. Fix permissions directory of
          /var/lib/rancher/rke2/data:\ncd /var/lib/rancher/rke2/agent\nchown root:root
          data\nchmod 0750 data\nls -l\n\n6. Fix permissions of files in /var/lib/rancher/rke2/data:\n\
          cd /var/lib/rancher/rke2/data\nchown root:root ./*\nchmod 0640 ./*\nls -l\n\n\
          7. Fix permissions in /var/lib/rancher/rke2/server:\ncd /var/lib/rancher/rke2/server\n\
          chown root:root ./*\nchmod 0700 cred\nchmod 0700 db\nchmod 0700 tls\nchmod 0750
          manifests\nchmod 0750 logs\nchmod 0600 token\nls -l\n\nEdit the RKE2 Server
          configuration file on all RKE2 Server hosts, located at /etc/rancher/rke2/config.yaml,
          to contain the following:\n\nwrite-kubeconfig-mode: \"0600\"\n\nOnce the configuration
          file is updated, restart the RKE2 Server. Run the command:\nsystemctl restart
          rke2-server"

  # MANUAL
  - id: "V-254565"
    text: "It is important to disable any unnecessary components to reduce any potential
      attack surfaces. \n\nRKE2 allows disabling the following components:\n- rke2-canal\n\
      - rke2-coredns\n- rke2-ingress-nginx\n- rke2-kube-proxy\n- rke2-metrics-server\n\
      \nIf utilizing any of these components presents a security risk, or if any of
      the components are not required then they can be disabled by using the \"disable\"\
      \ flag.\n\nIf any of the components are not required, they can be disabled by
      using the \"disable\" flag.\n\nSatisfies: SRG-APP-000141-CTR-000315, SRG-APP-000384-CTR-000915"
    checks:
      - id: V-254565
        text: "It is important to disable any unnecessary components to reduce any potential
          attack surfaces. \n\nRKE2 allows disabling the following components:\n- rke2-canal\n\
          - rke2-coredns\n- rke2-ingress-nginx\n- rke2-kube-proxy\n- rke2-metrics-server\n\
          \nIf utilizing any of these components presents a security risk, or if any of
          the components are not required then they can be disabled by using the \"disable\"\
          \ flag.\n\nIf any of the components are not required, they can be disabled by
          using the \"disable\" flag.\n\nSatisfies: SRG-APP-000141-CTR-000315, SRG-APP-000384-CTR-000915"
        type: "skip"
        remediation: "Disable unnecessary RKE2 components.\n\nEdit the RKE2 Server configuration
          file on all RKE2 Server hosts, located at /etc/rancher/rke2/config.yaml, so
          that it contains a \"disable\" flag if any default RKE2 components are unnecessary.\
          \ \n\nExample:\ndisable: rke2-canal\ndisable: rke2-coredns\ndisable: rke2-ingress-nginx\n\
          disable: rke2-kube-proxy\ndisable: rke2-metrics-server\n\nOnce the configuration
          file is updated, restart the RKE2 Server. Run the command:\nsystemctl restart
          rke2-server"

  # MANUAL
  - id: "V-254566"
    text: "Ports, protocols, and services within the RKE2 runtime must be controlled
      and conform to the PPSM CAL. Those ports, protocols, and services that fall outside
      the PPSM CAL must be blocked by the runtime. Instructions on the PPSM can be found
      in DOD Instruction 8551.01 Policy.\n\nRKE2 sets most ports and services configuration
      upon initiation; however, these ports can be changed after the fact to noncompliant
      configurations. It is important to verify core component configurations for compliance.\n\
      \nAPI Server, Scheduler, Controller, ETCD, and User Pods should all be checked
      to ensure proper PPS configuration.\n\nSatisfies: SRG-APP-000142-CTR-000325, SRG-APP-000142-CTR-000330,
      SRG-APP-000383-CTR-000910"
    checks:
      - id: V-254566
        text: "Ports, protocols, and services within the RKE2 runtime must be controlled
          and conform to the PPSM CAL. Those ports, protocols, and services that fall
          outside the PPSM CAL must be blocked by the runtime. Instructions on the PPSM
          can be found in DOD Instruction 8551.01 Policy.\n\nRKE2 sets most ports and
          services configuration upon initiation; however, these ports can be changed
          after the fact to noncompliant configurations. It is important to verify core
          component configurations for compliance.\n\nAPI Server, Scheduler, Controller,
          ETCD, and User Pods should all be checked to ensure proper PPS configuration.\n\
          \nSatisfies: SRG-APP-000142-CTR-000325, SRG-APP-000142-CTR-000330, SRG-APP-000383-CTR-000910"
        type: "skip"
        remediation: "Review system documentation and ensure all ports, protocols, and
          services are properly documented and approved by the ISSO."

  # MANUAL
  - id: "V-254567"
    text: "Secrets, such as passwords, keys, tokens, and certificates should not be
      stored as environment variables. These environment variables are accessible inside
      RKE2 by the \"Get Pod\" API call, and by any system, such as CI/CD pipeline, which
      has access to the definition file of the container. Secrets must be mounted from
      files or stored within password vaults."
    checks:
      - id: V-254567
        text: "Secrets, such as passwords, keys, tokens, and certificates should not be
          stored as environment variables. These environment variables are accessible
          inside RKE2 by the \"Get Pod\" API call, and by any system, such as CI/CD pipeline,
          which has access to the definition file of the container. Secrets must be mounted
          from files or stored within password vaults."
        type: "skip"
        remediation: "Any secrets stored as environment variables must be moved to the
          secret files with the proper protections and enforcements or placed within a
          password vault."
  - id: "V-254568"
    text: "Terminating an idle session within a short time period reduces the window
      of opportunity for unauthorized personnel to take control of a management session
      enabled on the console or console port that has been left unattended. In addition,
      quickly terminating an idle session will also free up resources committed by the
      managed network element. \n\nTerminating network connections associated with communications
      sessions includes, for example, de-allocating associated TCP/IP address/port pairs
      at the operating system level, or de-allocating networking assignments at the
      application level if multiple application sessions are using a single, operating-system-level
      network connection. This does not mean that the application terminates all sessions
      or network access; it only ends the inactive session and releases the resources
      associated with that session."
    checks:
      - id: V-254568
        text: "Terminating an idle session within a short time period reduces the window
          of opportunity for unauthorized personnel to take control of a management session
          enabled on the console or console port that has been left unattended. In addition,
          quickly terminating an idle session will also free up resources committed by
          the managed network element. \n\nTerminating network connections associated
          with communications sessions includes, for example, de-allocating associated
          TCP/IP address/port pairs at the operating system level, or de-allocating networking
          assignments at the application level if multiple application sessions are using
          a single, operating-system-level network connection. This does not mean that
          the application terminates all sessions or network access; it only ends the
          inactive session and releases the resources associated with that session."
        audit: "/bin/ps -fC $kubeletbin"
        audit_config: "/bin/sh -c 'if test -e $kubeletconf; then /bin/cat $kubeletconf; fi' "
        tests:
          test_items:
            - flag: --streaming-connection-idle-timeout
              path: '{.streamingConnectionIdleTimeout}'
              compare:
                op: eq
                value: "5m"
              set: true
        remediation: "Edit the RKE2 Server configuration file on all RKE2 Agent hosts,
          located at /etc/rancher/rke2/config.yaml, to contain the following:\n\nkubelet-arg:\n\
          - streaming-connection-idle-timeout=5m\n\nIf configuration files are updated
          on a host, restart the RKE2 Service. \nRun the command \"systemctl restart rke2-server\"\
          \ for server hosts and \"systemctl restart rke2-agent\" for agent hosts."
        scored: true

  - id: "V-254569"
    text: "RKE2 runs as isolated as possible.\n\nRKE2 is a container-based Kubernetes
      distribution. A container image is essentially a complete and executable version
      of an application, which relies only on the host's OS kernel. Running containers
      use resource isolation features in the OS kernel, such as cgroups in Linux, to
      run multiple independent containers on the same OS. Unless part of the core RKE2
      system or configured explicitly, containers managed by RKE2 should not have access
      to host resources.\n\nProper hardening of the surrounding environment is independent
      of RKE2 but ensures overall security stature.\n\nWhen Kubernetes launches a container,
      there are several mechanisms available to ensure complete deployments:\n- When
      a primary container process fails it is destroyed rebooted.\n- When Liveness checks
      fail for the container deployment it is destroyed rebooted.\n- If a readiness
      check fails at any point after the deployment the container is destroyed rebooted.\n\
      - Kubernetes has the ability to rollback a deployment configuration to a previous
      state if a deployment fails.\n- Failover traffic to a working replica if any of
      the previous problems are encountered.\n\nSystem kernel is responsible for memory,
      disk, and task management. The kernel provides a gateway between the system hardware
      and software. Kubernetes requires kernel access to allocate resources to the Control
      Plane. Threat actors that penetrate the system kernel can inject malicious code
      or hijack the Kubernetes architecture. It is vital to implement protections through
      Kubernetes components to reduce the attack surface."
    checks:
      - id: V-254569
        text: "RKE2 runs as isolated as possible.\n\nRKE2 is a container-based Kubernetes
          distribution. A container image is essentially a complete and executable version
          of an application, which relies only on the host's OS kernel. Running containers
          use resource isolation features in the OS kernel, such as cgroups in Linux,
          to run multiple independent containers on the same OS. Unless part of the core
          RKE2 system or configured explicitly, containers managed by RKE2 should not
          have access to host resources.\n\nProper hardening of the surrounding environment
          is independent of RKE2 but ensures overall security stature.\n\nWhen Kubernetes
          launches a container, there are several mechanisms available to ensure complete
          deployments:\n- When a primary container process fails it is destroyed rebooted.\n\
          - When Liveness checks fail for the container deployment it is destroyed rebooted.\n\
          - If a readiness check fails at any point after the deployment the container
          is destroyed rebooted.\n- Kubernetes has the ability to rollback a deployment
          configuration to a previous state if a deployment fails.\n- Failover traffic
          to a working replica if any of the previous problems are encountered.\n\nSystem
          kernel is responsible for memory, disk, and task management. The kernel provides
          a gateway between the system hardware and software. Kubernetes requires kernel
          access to allocate resources to the Control Plane. Threat actors that penetrate
          the system kernel can inject malicious code or hijack the Kubernetes architecture.
          It is vital to implement protections through Kubernetes components to reduce
          the attack surface."
        audit: "/bin/ps -fC $kubeletbin"
        audit_config: "/bin/sh -c 'if test -e $kubeletconf; then /bin/cat $kubeletconf; fi' "
        tests:
          test_items:
            - flag: --protect-kernel-defaults
              path: '{.protectKernelDefaults}'
              compare:
                op: eq
                value: true
              set: true
        remediation: "Edit the RKE2 Server configuration file on all RKE2 Server hosts,
          located at /etc/rancher/rke2/config.yaml, to contain the following:\n\nkubelet-arg:\n\
          \ --protect-kernel-defaults=true\n\nIf configuration files are updated on a
          host, restart the RKE2 Service. \nRun the command \"systemctl restart rke2-server\"\
          \ for server hosts and \"systemctl restart rke2-agent\" for agent hosts."
        scored: true

  # MANUAL
  - id: "V-254570"
    text: "Separating user functionality from management functionality is a requirement
      for all the components within the Kubernetes Control Plane. Without the separation,
      users may have access to management functions that can degrade the Kubernetes
      architecture and the services being offered, and can offer a method to bypass
      testing and validation of functions before introduced into a production environment.\n\
      \nSatisfies: SRG-APP-000243-CTR-000600, SRG-APP-000431-CTR-001065, SRG-APP-000211-CTR-000530,
      SRG-APP-000243-CTR-000595"
    checks:
      - id: V-254570
        text: "Separating user functionality from management functionality is a requirement
          for all the components within the Kubernetes Control Plane. Without the separation,
          users may have access to management functions that can degrade the Kubernetes
          architecture and the services being offered, and can offer a method to bypass
          testing and validation of functions before introduced into a production environment.\n\
          \nSatisfies: SRG-APP-000243-CTR-000600, SRG-APP-000431-CTR-001065, SRG-APP-000211-CTR-000530,
          SRG-APP-000243-CTR-000595"
        type: "skip"
        remediation: "System namespaces are reserved and isolated.\n\nA resource cannot
          move to a new namespace; the resource must be deleted and recreated in the new
          namespace.\n\nkubectl delete <resource_type> <resource_name>\nkubectl create
          -f <resource.yaml> --namespace=<user_created_namespace>"

  - id: "V-254571"
    text: "Admission controllers intercept requests to the Kubernetes API before an
      object is instantiated. Enabling the admissions webhook allows for Kubernetes
      to apply policies against objects that are to be created, read, updated or deleted.\n\
      \nAdmissions controllers can be used for:\n- Prevent pod’s ability to run privileged
      containers\n- Prevent pod’s ability to use privileged escalation\n- Controlling
      pod’s access to volume types\n- Controlling pod’s access to host file system\n\
      - Controlling pod’s usage of host networking objects and configuration\n\nSatisfies:
      SRG-APP-000340-CTR-000770, SRG-APP-000342-CTR-000775"
    checks:
      - id: V-254571
        text: "Admission controllers intercept requests to the Kubernetes API before an
          object is instantiated. Enabling the admissions webhook allows for Kubernetes
          to apply policies against objects that are to be created, read, updated or deleted.\n\
          \nAdmissions controllers can be used for:\n- Prevent pod’s ability to run privileged
          containers\n- Prevent pod’s ability to use privileged escalation\n- Controlling
          pod’s access to volume types\n- Controlling pod’s access to host file system\n\
          - Controlling pod’s usage of host networking objects and configuration\n\nSatisfies:
          SRG-APP-000340-CTR-000770, SRG-APP-000342-CTR-000775"
        audit_config: "/bin/cat $psaconf"
        tests:
          bin_op: and
          test_items:
            - path: '{.plugins[0].configuration.defaults.enforce}'
              compare:
                op: eq
                value: "restricted"
            - path: '{.plugins[0].configuration.defaults.enforce-version}'
              compare:
                op: eq
                value: "latest"
            - path: '{.plugins[0].configuration.defaults.audit}'
              compare:
                op: eq
                value: "restricted"
            - path: '{.plugins[0].configuration.defaults.audit-version}'
              compare:
                op: eq
                value: "latest"

            - path: '{.plugins[0].configuration.defaults.warn}'
              compare:
                op: eq
                value: "restricted"
            - path: '{.plugins[0].configuration.defaults.warn-version}'
              compare:
                op: eq
                value: "latest"
        remediation: "If using RKE2 v1.24 or older:\n\nOn each Control Plane node, create
          the following policy to a file called restricted.yml.\n\napiVersion: policy/v1beta1\n\
          kind: PodSecurityPolicy\nmetadata:\nname: restricted\nannotations:\nseccomp.security.alpha.kubernetes.io/allowedProfileNames:
          'docker/default,runtime/default'\napparmor.security.beta.kubernetes.io/allowedProfileNames:
          'runtime/default'\nseccomp.security.alpha.kubernetes.io/defaultProfileName:
          'runtime/default'\napparmor.security.beta.kubernetes.io/defaultProfileName:
          'runtime/default'\nspec:\nprivileged: false\n#Required to prevent escalations
          to root.\nallowPrivilegeEscalation: false\n#This is redundant with non-root
          + disallow privilege escalation,\n# but we can provide it for defense in depth.\n\
          requiredDropCapabilities:\n- ALL\n# Allow core volume types.\nvolumes:\n- 'configMap'\n\
          - 'emptyDir'\n- 'projected'\n- 'secret'\n- 'downwardAPI'\n# Assume that persistentVolumes
          set up by the cluster admin are safe to use.\n- 'persistentVolumeClaim'\nhostNetwork:
          false\nhostIPC: false\nhostPID: false\nrunAsUser:\n# Require the container to
          run without root privileges.\nrule: 'MustRunAsNonRoot'\nseLinux:\n# This policy
          assumes the nodes are using AppArmor rather than SELinux.\nrule: 'RunAsAny'\n\
          supplementalGroups:\nrule: 'MustRunAs'\nranges:\n# Forbid adding the root group.\n\
          - min: 1\nmax: 65535\nfsGroup:\nrule: 'MustRunAs'\nranges:\n# Forbid adding
          the root group.\n- min: 1\nmax: 65535\nreadOnlyRootFilesystem: false\n\nTo implement
          the policy, run the command:\n\nkubectl create -f restricted.yml\"\n\nIf using
          RKE v1.25 or newer:\n\nOn each Control Plane node, create the file \"/etc/rancher/rke2/rke2-pss.yaml\"\
          \ and add the following content:\n\napiVersion: apiserver.config.k8s.io/v1\n\
          kind: AdmissionConfiguration\nplugins:\n- name: PodSecurity\n  configuration:\n\
          \    apiVersion: pod-security.admission.config.k8s.io/v1beta1\n    kind: PodSecurityConfiguration\n\
          \    defaults:\n      enforce: \"restricted\"\n      enforce-version: \"latest\"\
          \n      audit: \"restricted\"\n      audit-version: \"latest\"\n      warn:
          \"restricted\"\n      warn-version: \"latest\"\n    exemptions:\n      usernames:
          []\n      runtimeClasses: []\n      namespaces: [kube-system, cis-operator-system,
          tigera-operator]\n\nEnsure the namespace exemptions contain only namespaces
          requiring access to capabilities outside of the restricted settings above.\n\
          \nOnce the file is created, restart the Control Plane nodes with:\n\nsystemctl
          restart rke2-server"
        scored: true

  - id: "V-254572"
    text: "Controlling access to those users and roles responsible for patching and
      updating RKE2 reduces the risk of untested or potentially malicious software from
      being installed within the platform. This access may be separate from the access
      required to install container images into the registry and those access requirements
      required to instantiate an image into a service. Explicit privileges (escalated
      or administrative privileges) provide the regular user with explicit capabilities
      and control that exceeds the rights of a regular user.\n\nKubernetes uses the
      API Server to control communication to the other services that makeup Kubernetes.
      The use of authorizations and not the default of \"AlwaysAllow\" enables the Kubernetes
      functions control to only the groups that need them.\n\nTo control access, the
      API server must have one of the following options set for the authorization mode:\n\
      \    --authorization-mode=ABAC Attribute-Based Access Control (ABAC) mode allows
      a user to configure policies using local files.\n    --authorization-mode=RBAC
      Role-based access control (RBAC) mode allows a user to create and store policies
      using the Kubernetes API.\n    --authorization-mode=Webhook\nWebHook is an HTTP
      callback mode that allows a user to manage authorization using a remote REST endpoint.\n\
      \    --authorization-mode=Node \nNode authorization is a special-purpose authorization
      mode that specifically authorizes API requests made by kubelets.\n    --authorization-mode=AlwaysDeny\
      \ \nThis flag blocks all requests. Use this flag only for testing.\n\nSatisfies:
      SRG-APP-000378-CTR-000880, SRG-APP-000378-CTR-000885"
    checks:
      - id: V-254572
        text: "Controlling access to those users and roles responsible for patching and
          updating RKE2 reduces the risk of untested or potentially malicious software
          from being installed within the platform. This access may be separate from the
          access required to install container images into the registry and those access
          requirements required to instantiate an image into a service. Explicit privileges
          (escalated or administrative privileges) provide the regular user with explicit
          capabilities and control that exceeds the rights of a regular user.\n\nKubernetes
          uses the API Server to control communication to the other services that makeup
          Kubernetes. The use of authorizations and not the default of \"AlwaysAllow\"\
          \ enables the Kubernetes functions control to only the groups that need them.\n\
          \nTo control access, the API server must have one of the following options set
          for the authorization mode:\n    --authorization-mode=ABAC Attribute-Based Access
          Control (ABAC) mode allows a user to configure policies using local files.\n\
          \    --authorization-mode=RBAC Role-based access control (RBAC) mode allows
          a user to create and store policies using the Kubernetes API.\n    --authorization-mode=Webhook\n\
          WebHook is an HTTP callback mode that allows a user to manage authorization
          using a remote REST endpoint.\n    --authorization-mode=Node \nNode authorization
          is a special-purpose authorization mode that specifically authorizes API requests
          made by kubelets.\n    --authorization-mode=AlwaysDeny \nThis flag blocks all
          requests. Use this flag only for testing.\n\nSatisfies: SRG-APP-000378-CTR-000880,
          SRG-APP-000378-CTR-000885"
        audit: "/bin/ps -fC $apiserverbin"
        tests:
          test_items:
            - flag: --authorization-mode
              compare:
                op: eq
                value: "Node,RBAC"
              set: true
        remediation: "Edit the RKE2 Server configuration file on all RKE2 Control Plane
          hosts, located at /etc/rancher/rke2/config.yaml, to contain the following:\n\
          \n kube-apiserver-arg:\n--authorization-mode=RBAC,Node\n\nOnce configuration
          file is updated, restart the RKE2 Server. Run the command:\nsystemctl restart
          rke2-server"
        scored: true

  - id: "V-254573"
    text: "Encrypting secrets at rest in etcd.\n\nBy default, RKE2 will create an encryption
      key and configuration file and pass these to the Kubernetes API server. The result
      is that RKE2 automatically encrypts Kubernetes Secret objects when writing them
      to etcd."
    checks:
      - id: V-254573
        text: "Encrypting secrets at rest in etcd.\n\nBy default, RKE2 will create an
          encryption key and configuration file and pass these to the Kubernetes API server.
          The result is that RKE2 automatically encrypts Kubernetes Secret objects when
          writing them to etcd."
        audit_config: "/bin/cat $kubernetesconf"
        tests:
          bin_op: or
          test_items:
            - path: '{.secrets-encryption}'
              compare:
                op: eq
                value: true
            - path: '{.secrets-encryption}'
              set: false
        remediation: "This is Not Applicable for RKE2 versions 1.20 and greater.\n\nEnable
          secrets encryption.\n\nEdit the RKE2 configuration file on all RKE2 servers,
          located at /etc/rancher/rke2/config.yaml, so that it contains:\n\nsecrets-encryption:
          true"
        scored: true

  # MANUAL
  - id: "V-254574"
    text: "Previous versions of Rancher RKE2 components that are not removed after updates
      have been installed may be exploited by adversaries by causing older components
      to execute which contain vulnerabilities. When these components are deleted, the
      likelihood of this happening is removed."
    checks:
      - id: V-254574
        text: "Previous versions of Rancher RKE2 components that are not removed after
          updates have been installed may be exploited by adversaries by causing older
          components to execute which contain vulnerabilities. When these components are
          deleted, the likelihood of this happening is removed."
        type: "skip"
        remediation: "Remove any old pods that are using older images. On the RKE2 Control
          Plane, run the command:\n\nkubectl delete pod podname\n(Note: \"podname\" is
          the name of the pod to delete.)\n\nRun the command:\nsystemctl restart rke2-server"

  # MANUAL
  - id: "V-254575"
    text: "Software supporting RKE2, images in the registry must stay up to date with
      the latest patches, service packs, and hot fixes. Not updating RKE2 and container
      images will expose the organization to vulnerabilities.\n\nFlaws discovered during
      security assessments, continuous monitoring, incident response activities, or
      information system error handling must also be addressed expeditiously.\n\nOrganization-defined
      time periods for updating security-relevant container platform components may
      vary based on a variety of factors including, for example, the security category
      of the information system or the criticality of the update (i.e., severity of
      the vulnerability related to the discovered flaw).\n\nThis requirement will apply
      to software patch management solutions used to install patches across the enclave
      and to applications themselves that are not part of that patch management solution.
      For example, many browsers today provide the capability to install their own patch
      software. Patch criticality, as well as system criticality will vary. Therefore,
      the tactical situations regarding the patch management process will also vary.
      This means that the time period utilized must be a configurable parameter. Time
      frames for application of security-relevant software updates may be dependent
      upon the Information Assurance Vulnerability Management (IAVM) process.\n\nRKE2
      components will be configured to check for and install security-relevant software
      updates within an identified time period from the availability of the update.
      RKE2 registry will ensure the images are current. The specific time period will
      be defined by an authoritative source (e.g., IAVM, CTOs, DTMs, and STIGs)."
    checks:
      - id: V-254575
        text: "Software supporting RKE2, images in the registry must stay up to date with
          the latest patches, service packs, and hot fixes. Not updating RKE2 and container
          images will expose the organization to vulnerabilities.\n\nFlaws discovered
          during security assessments, continuous monitoring, incident response activities,
          or information system error handling must also be addressed expeditiously.\n\
          \nOrganization-defined time periods for updating security-relevant container
          platform components may vary based on a variety of factors including, for example,
          the security category of the information system or the criticality of the update
          (i.e., severity of the vulnerability related to the discovered flaw).\n\nThis
          requirement will apply to software patch management solutions used to install
          patches across the enclave and to applications themselves that are not part
          of that patch management solution. For example, many browsers today provide
          the capability to install their own patch software. Patch criticality, as well
          as system criticality will vary. Therefore, the tactical situations regarding
          the patch management process will also vary. This means that the time period
          utilized must be a configurable parameter. Time frames for application of security-relevant
          software updates may be dependent upon the Information Assurance Vulnerability
          Management (IAVM) process.\n\nRKE2 components will be configured to check for
          and install security-relevant software updates within an identified time period
          from the availability of the update. RKE2 registry will ensure the images are
          current. The specific time period will be defined by an authoritative source
          (e.g., IAVM, CTOs, DTMs, and STIGs)."
        type: "skip"
        remediation: "Upgrade RKE2 to the supported version. Institute and adhere to the
          policies and procedures to ensure that patches are consistently applied within
          the time allowed."

  # MANUAL
  - id: "V-268321"
    text: "Only RKE2 images that have been properly signed by Rancher Government's authorized
      key will be deployed to ensure the cluster's security and compliance with organizational
      policies."
    checks:
      - id: V-268321
        text: "Only RKE2 images that have been properly signed by Rancher Government's
          authorized key will be deployed to ensure the cluster's security and compliance
          with organizational policies."
        type: "skip"
        remediation: "Immediate action must be taken to remove non-verifiable images from
          the cluster and replace them with verifiable images. \n\nUtilize Hauler (https://hauler.dev)
          to pull and verify RKE2 images from Rancher Government Solutions Carbide Repository.\n\
          \nFor more information about pulling Carbide images and their signatures, including
          RKE2, see: \nhttps://rancherfederal.github.io/carbide-docs/docs/registry-docs/downloading-images"
